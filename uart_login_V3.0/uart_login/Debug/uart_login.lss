
uart_login.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800160  00800160  00000496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000945  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044c  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000522  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c9  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cc  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 01 	call	0x228	; 0x228 <main>
  9e:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <port_init>:
 */ 
#include "led.h"

void port_init(){
	
	DDRB =0x03;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1<<PORTB0)|(1<<PORTB1); 
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <access_denied>:
}

void access_denied(){
	
		PORTB &= ~(1<<PORTB0);
  b2:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <access_denied+0x8>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <access_denied+0x12>
  c4:	00 00       	nop
		_delay_ms(500);
		PORTB |= (1<<PORTB0);
  c6:	28 9a       	sbi	0x05, 0	; 5
  c8:	08 95       	ret

000000ca <authorised>:
		
}

void authorised(){
		
		PORTB &= ~(1<<PORTB1);
  ca:	29 98       	cbi	0x05, 1	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	89 e6       	ldi	r24, 0x69	; 105
  d0:	98 e1       	ldi	r25, 0x18	; 24
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <authorised+0x8>
  da:	00 c0       	rjmp	.+0      	; 0xdc <authorised+0x12>
  dc:	00 00       	nop
		_delay_ms(500);
		PORTB |= (1<<PORTB1);
  de:	29 9a       	sbi	0x05, 1	; 5
  e0:	08 95       	ret

000000e2 <uart_init>:
volatile bool is_rx_done= false;
char UARTbuffer[20];
uint8_t rcvCount = 0;

void uart_init(int UBRR){
	cli();
  e2:	f8 94       	cli
	UBRR0H = (unsigned char)(UBRR>>8);
  e4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)UBRR;
  e8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B=(0<<RXCIE0)|(0<<TXCIE0);
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
	//enable tx and rx of uart 0.
	UCSR0B=(1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);
  f2:	88 e9       	ldi	r24, 0x98	; 152
  f4:	80 83       	st	Z, r24
	//enable interrupts
	sei();
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <uart_tx>:
}

State uart_tx(char tx){
	
	if( UCSR0A & (1<<UDRE0)){
  fa:	90 91 c0 00 	lds	r25, 0x00C0
  fe:	95 ff       	sbrs	r25, 5
 100:	04 c0       	rjmp	.+8      	; 0x10a <uart_tx+0x10>
		UDR0 =tx;
 102:	80 93 c6 00 	sts	0x00C6, r24
		return success; 
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
	}
	else
		return fail;
 10a:	80 e0       	ldi	r24, 0x00	; 0
	
}
 10c:	08 95       	ret

0000010e <send_to_debug>:
	}
	else 
		return fail;
}

void send_to_debug(char c){
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
	while( uart_tx(c) != success);
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 7d 00 	call	0xfa	; 0xfa <uart_tx>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	d9 f7       	brne	.-10     	; 0x112 <send_to_debug+0x4>
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <__vector_18>:


ISR (USART_RX_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	
	if((UCSR0A) & (1<<RXC0)){
 12c:	80 91 c0 00 	lds	r24, 0x00C0
 130:	88 23       	and	r24, r24
 132:	3c f4       	brge	.+14     	; 0x142 <__vector_18+0x22>
		
		rx_byte=UDR0;
 134:	80 91 c6 00 	lds	r24, 0x00C6
 138:	80 93 61 01 	sts	0x0161, r24
		is_rx_done= true;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 60 01 	sts	0x0160, r24
		//vRcvByte(rx_byte);
	}
}
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <vStringSend>:
		}
		
	}
}

void vStringSend(char *str){
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
	
	uint8_t count=0;
	
	while( str[count] != '\0' ){
 156:	88 81       	ld	r24, Y
 158:	88 23       	and	r24, r24
 15a:	99 f0       	breq	.+38     	; 0x182 <vStringSend+0x34>
	}
}

void vStringSend(char *str){
	
	uint8_t count=0;
 15c:	10 e0       	ldi	r17, 0x00	; 0
	
	while( str[count] != '\0' ){
		
		send_to_debug(str[count]);
 15e:	0e 94 87 00 	call	0x10e	; 0x10e <send_to_debug>
 162:	2f e7       	ldi	r18, 0x7F	; 127
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <vStringSend+0x1a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <vStringSend+0x24>
 172:	00 00       	nop
		_delay_ms(25);
		count++;
 174:	1f 5f       	subi	r17, 0xFF	; 255

void vStringSend(char *str){
	
	uint8_t count=0;
	
	while( str[count] != '\0' ){
 176:	fe 01       	movw	r30, r28
 178:	e1 0f       	add	r30, r17
 17a:	f1 1d       	adc	r31, r1
 17c:	80 81       	ld	r24, Z
 17e:	81 11       	cpse	r24, r1
 180:	ee cf       	rjmp	.-36     	; 0x15e <vStringSend+0x10>
		
		send_to_debug(str[count]);
		_delay_ms(25);
		count++;
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	08 95       	ret

0000018a <vRcvString>:

void vRcvString(char *str){
	uint8_t r_count=0;
	//user input
	while(is_rx_done != true);
 18a:	20 91 60 01 	lds	r18, 0x0160
 18e:	22 23       	and	r18, r18
 190:	e1 f3       	breq	.-8      	; 0x18a <vRcvString>
	is_rx_done = false;
 192:	10 92 60 01 	sts	0x0160, r1
	//user input logic
	str[r_count] = rx_byte;
 196:	20 91 61 01 	lds	r18, 0x0161
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
	while(str[r_count] != 0x0D){
 19e:	2d 30       	cpi	r18, 0x0D	; 13
 1a0:	89 f0       	breq	.+34     	; 0x1c4 <vRcvString+0x3a>
		count++;
	}
}

void vRcvString(char *str){
	uint8_t r_count=0;
 1a2:	30 e0       	ldi	r19, 0x00	; 0
	while(is_rx_done != true);
	is_rx_done = false;
	//user input logic
	str[r_count] = rx_byte;
	while(str[r_count] != 0x0D){
		while(is_rx_done != true);
 1a4:	20 91 60 01 	lds	r18, 0x0160
 1a8:	22 23       	and	r18, r18
 1aa:	e1 f3       	breq	.-8      	; 0x1a4 <vRcvString+0x1a>
		is_rx_done = false;
 1ac:	10 92 60 01 	sts	0x0160, r1
		r_count++;
 1b0:	3f 5f       	subi	r19, 0xFF	; 255
		str[r_count]=rx_byte;
 1b2:	fc 01       	movw	r30, r24
 1b4:	e3 0f       	add	r30, r19
 1b6:	f1 1d       	adc	r31, r1
 1b8:	20 91 61 01 	lds	r18, 0x0161
 1bc:	20 83       	st	Z, r18
	//user input
	while(is_rx_done != true);
	is_rx_done = false;
	//user input logic
	str[r_count] = rx_byte;
	while(str[r_count] != 0x0D){
 1be:	2d 30       	cpi	r18, 0x0D	; 13
 1c0:	89 f7       	brne	.-30     	; 0x1a4 <vRcvString+0x1a>
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <vRcvString+0x3c>
 1c4:	fc 01       	movw	r30, r24
		while(is_rx_done != true);
		is_rx_done = false;
		r_count++;
		str[r_count]=rx_byte;
	}
	str[r_count] = '\0';
 1c6:	10 82       	st	Z, r1
 1c8:	08 95       	ret

000001ca <over_write_eeprom>:
}

void over_write_eeprom(){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	2f 97       	sbiw	r28, 0x0f	; 15
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
	char c[15];
	//uint8_t count=0;
	vStringSend("new pw:");
 1de:	8e e1       	ldi	r24, 0x1E	; 30
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
	vRcvString(c);
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 c5 00 	call	0x18a	; 0x18a <vRcvString>
	vStringSend("\r\n");
 1ee:	87 e4       	ldi	r24, 0x47	; 71
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
	eeprom_update_block((const void *)c, (void *)USERPW_ADDRESS, 10);
 1f6:	4a e0       	ldi	r20, 0x0A	; 10
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	67 e1       	ldi	r22, 0x17	; 23
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 95 01 	call	0x32a	; 0x32a <__eeupd_block_m328p>
	eeprom_read_block((void*)readblock, (const void*)USERPW_ADDRESS, 10);
 206:	4a e0       	ldi	r20, 0x0A	; 10
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	67 e1       	ldi	r22, 0x17	; 23
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	86 e7       	ldi	r24, 0x76	; 118
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 85 01 	call	0x30a	; 0x30a <__eerd_block_m328p>
	
 216:	2f 96       	adiw	r28, 0x0f	; 15
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <main>:
void over_write_eeprom();

uint8_t USRPW[15]="password1";
char readblock[15];

int main(void) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	a3 97       	sbiw	r28, 0x23	; 35
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
	char col_user[15];
	char dec[5];
	unsigned char s[15]="\r\npassword:\0";
 23c:	8d e0       	ldi	r24, 0x0D	; 13
 23e:	ef e0       	ldi	r30, 0x0F	; 15
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	de 01       	movw	r26, r28
 244:	55 96       	adiw	r26, 0x15	; 21
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x1e>
 24e:	1b a2       	std	Y+35, r1	; 0x23
 250:	1a a2       	std	Y+34, r1	; 0x22
	
	//init
	uart_init(MYUBRR);
 252:	87 e6       	ldi	r24, 0x67	; 103
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 71 00 	call	0xe2	; 0xe2 <uart_init>
	port_init();
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <port_init>
	
	//eeprom init
	eeprom_write_block((const void *)USRPW, (void *)USERPW_ADDRESS, 10);
 25e:	4a e0       	ldi	r20, 0x0A	; 10
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	67 e1       	ldi	r22, 0x17	; 23
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 b7 01 	call	0x36e	; 0x36e <__eewr_block_m328p>
	eeprom_read_block((void*)readblock, (const void*)USERPW_ADDRESS, 10);
 26e:	4a e0       	ldi	r20, 0x0A	; 10
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	67 e1       	ldi	r22, 0x17	; 23
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	86 e7       	ldi	r24, 0x76	; 118
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 85 01 	call	0x30a	; 0x30a <__eerd_block_m328p>
	readblock[9] = '\0';
 27e:	10 92 7f 01 	sts	0x017F, r1
	while(1){
		
		//memset(col_user,'\0',15);
		
		vStringSend((char *)s);
 282:	ce 01       	movw	r24, r28
 284:	45 96       	adiw	r24, 0x15	; 21
 286:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
		vRcvString(col_user);
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 c5 00 	call	0x18a	; 0x18a <vRcvString>
		vStringSend("\r\n");
 292:	87 e4       	ldi	r24, 0x47	; 71
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
		//compare
		if(strcmp(col_user,readblock) ==0){
 29a:	66 e7       	ldi	r22, 0x76	; 118
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <strcmp>
 2a6:	89 2b       	or	r24, r25
 2a8:	01 f5       	brne	.+64     	; 0x2ea <main+0xc2>
			vStringSend  ("access granted\r\n");
 2aa:	86 e2       	ldi	r24, 0x26	; 38
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
			authorised();
 2b2:	0e 94 65 00 	call	0xca	; 0xca <authorised>
			vStringSend ("change password?\r\n");
 2b6:	87 e3       	ldi	r24, 0x37	; 55
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
			vRcvString(dec);
 2be:	ce 01       	movw	r24, r28
 2c0:	40 96       	adiw	r24, 0x10	; 16
 2c2:	0e 94 c5 00 	call	0x18a	; 0x18a <vRcvString>
			vStringSend("\r\n");
 2c6:	87 e4       	ldi	r24, 0x47	; 71
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
			if(strcmp(dec,"yes") ==0){
 2ce:	6a e4       	ldi	r22, 0x4A	; 74
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	ce 01       	movw	r24, r28
 2d4:	40 96       	adiw	r24, 0x10	; 16
 2d6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <strcmp>
 2da:	89 2b       	or	r24, r25
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <main+0xbc>
				over_write_eeprom ();
 2de:	0e 94 e5 00 	call	0x1ca	; 0x1ca <over_write_eeprom>
 2e2:	cf cf       	rjmp	.-98     	; 0x282 <main+0x5a>
			}
			else
			authorised();
 2e4:	0e 94 65 00 	call	0xca	; 0xca <authorised>
 2e8:	cc cf       	rjmp	.-104    	; 0x282 <main+0x5a>
		}
		else{
			vStringSend  ("accesss denied\r\n");
 2ea:	8e e4       	ldi	r24, 0x4E	; 78
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 a7 00 	call	0x14e	; 0x14e <vStringSend>
			access_denied();
 2f2:	0e 94 59 00 	call	0xb2	; 0xb2 <access_denied>
 2f6:	c5 cf       	rjmp	.-118    	; 0x282 <main+0x5a>

000002f8 <strcmp>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	dc 01       	movw	r26, r24
 2fc:	8d 91       	ld	r24, X+
 2fe:	01 90       	ld	r0, Z+
 300:	80 19       	sub	r24, r0
 302:	01 10       	cpse	r0, r1
 304:	d9 f3       	breq	.-10     	; 0x2fc <strcmp+0x4>
 306:	99 0b       	sbc	r25, r25
 308:	08 95       	ret

0000030a <__eerd_block_m328p>:
 30a:	dc 01       	movw	r26, r24
 30c:	cb 01       	movw	r24, r22

0000030e <__eerd_blraw_m328p>:
 30e:	fc 01       	movw	r30, r24
 310:	f9 99       	sbic	0x1f, 1	; 31
 312:	fe cf       	rjmp	.-4      	; 0x310 <__eerd_blraw_m328p+0x2>
 314:	06 c0       	rjmp	.+12     	; 0x322 <__eerd_blraw_m328p+0x14>
 316:	f2 bd       	out	0x22, r31	; 34
 318:	e1 bd       	out	0x21, r30	; 33
 31a:	f8 9a       	sbi	0x1f, 0	; 31
 31c:	31 96       	adiw	r30, 0x01	; 1
 31e:	00 b4       	in	r0, 0x20	; 32
 320:	0d 92       	st	X+, r0
 322:	41 50       	subi	r20, 0x01	; 1
 324:	50 40       	sbci	r21, 0x00	; 0
 326:	b8 f7       	brcc	.-18     	; 0x316 <__eerd_blraw_m328p+0x8>
 328:	08 95       	ret

0000032a <__eeupd_block_m328p>:
 32a:	dc 01       	movw	r26, r24
 32c:	a4 0f       	add	r26, r20
 32e:	b5 1f       	adc	r27, r21
 330:	41 50       	subi	r20, 0x01	; 1
 332:	50 40       	sbci	r21, 0x00	; 0
 334:	48 f0       	brcs	.+18     	; 0x348 <__eeupd_block_m328p+0x1e>
 336:	cb 01       	movw	r24, r22
 338:	84 0f       	add	r24, r20
 33a:	95 1f       	adc	r25, r21
 33c:	2e 91       	ld	r18, -X
 33e:	0e 94 a6 01 	call	0x34c	; 0x34c <__eeupd_r18_m328p>
 342:	41 50       	subi	r20, 0x01	; 1
 344:	50 40       	sbci	r21, 0x00	; 0
 346:	d0 f7       	brcc	.-12     	; 0x33c <__eeupd_block_m328p+0x12>
 348:	08 95       	ret

0000034a <__eeupd_byte_m328p>:
 34a:	26 2f       	mov	r18, r22

0000034c <__eeupd_r18_m328p>:
 34c:	f9 99       	sbic	0x1f, 1	; 31
 34e:	fe cf       	rjmp	.-4      	; 0x34c <__eeupd_r18_m328p>
 350:	92 bd       	out	0x22, r25	; 34
 352:	81 bd       	out	0x21, r24	; 33
 354:	f8 9a       	sbi	0x1f, 0	; 31
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	00 b4       	in	r0, 0x20	; 32
 35a:	02 16       	cp	r0, r18
 35c:	39 f0       	breq	.+14     	; 0x36c <__eeupd_r18_m328p+0x20>
 35e:	1f ba       	out	0x1f, r1	; 31
 360:	20 bd       	out	0x20, r18	; 32
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	fa 9a       	sbi	0x1f, 2	; 31
 368:	f9 9a       	sbi	0x1f, 1	; 31
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	08 95       	ret

0000036e <__eewr_block_m328p>:
 36e:	dc 01       	movw	r26, r24
 370:	cb 01       	movw	r24, r22
 372:	03 c0       	rjmp	.+6      	; 0x37a <__eewr_block_m328p+0xc>
 374:	2d 91       	ld	r18, X+
 376:	0e 94 c2 01 	call	0x384	; 0x384 <__eewr_r18_m328p>
 37a:	41 50       	subi	r20, 0x01	; 1
 37c:	50 40       	sbci	r21, 0x00	; 0
 37e:	d0 f7       	brcc	.-12     	; 0x374 <__eewr_block_m328p+0x6>
 380:	08 95       	ret

00000382 <__eewr_byte_m328p>:
 382:	26 2f       	mov	r18, r22

00000384 <__eewr_r18_m328p>:
 384:	f9 99       	sbic	0x1f, 1	; 31
 386:	fe cf       	rjmp	.-4      	; 0x384 <__eewr_r18_m328p>
 388:	1f ba       	out	0x1f, r1	; 31
 38a:	92 bd       	out	0x22, r25	; 34
 38c:	81 bd       	out	0x21, r24	; 33
 38e:	20 bd       	out	0x20, r18	; 32
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	fa 9a       	sbi	0x1f, 2	; 31
 396:	f9 9a       	sbi	0x1f, 1	; 31
 398:	0f be       	out	0x3f, r0	; 63
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
