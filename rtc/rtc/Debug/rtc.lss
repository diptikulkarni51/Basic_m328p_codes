
rtc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b79  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000538  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ff  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000020d  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f5  00000000  00000000  00001ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  8e:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <rtc_write>:
#include "ds.h"
#include "util/delay.h"
#include "uart.h"

void rtc_write(char dev_addr,char dev_loc,char dev_data)
{
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	18 2f       	mov	r17, r24
  9e:	d6 2f       	mov	r29, r22
  a0:	c4 2f       	mov	r28, r20
	start();
  a2:	0e 94 23 01 	call	0x246	; 0x246 <start>
	write_i2c(dev_addr);
  a6:	81 2f       	mov	r24, r17
  a8:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>
	write_i2c(dev_loc);
  ac:	8d 2f       	mov	r24, r29
  ae:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>
	write_i2c(dev_data);
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>
	stop();
  b8:	0e 94 2c 01 	call	0x258	; 0x258 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <rtc_write+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <rtc_write+0x30>
  c6:	00 00       	nop
	_delay_ms(10);
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	08 95       	ret

000000d0 <rtc_read>:

unsigned char rtc_read(char dev_addr,char dev_loc)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	c8 2f       	mov	r28, r24
  d6:	d6 2f       	mov	r29, r22
	char ch;

	start();
  d8:	0e 94 23 01 	call	0x246	; 0x246 <start>

	write_i2c(dev_addr);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>
	write_i2c(dev_loc);
  e2:	8d 2f       	mov	r24, r29
  e4:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>

	start();
  e8:	0e 94 23 01 	call	0x246	; 0x246 <start>
	write_i2c(dev_addr|0x01);
  ec:	8c 2f       	mov	r24, r28
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	0e 94 18 01 	call	0x230	; 0x230 <write_i2c>
	ch = read_i2c();
  f4:	0e 94 0d 01 	call	0x21a	; 0x21a <read_i2c>
  f8:	c8 2f       	mov	r28, r24

	stop();
  fa:	0e 94 2c 01 	call	0x258	; 0x258 <stop>
	return ch;
}
  fe:	8c 2f       	mov	r24, r28
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <disp_time_date>:



void disp_time_date()
{
 106:	cf 93       	push	r28
	char ch;

	tx(254);
 108:	8e ef       	ldi	r24, 0xFE	; 254
 10a:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(128);
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	str_serial("Time: ");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 48 01 	call	0x290	; 0x290 <str_serial>

	ch = rtc_read(0xd0 , 0x02);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	80 ed       	ldi	r24, 0xD0	; 208
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 124:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 126:	82 95       	swap	r24
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	80 5d       	subi	r24, 0xD0	; 208
 12c:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 130:	8c 2f       	mov	r24, r28
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 5d       	subi	r24, 0xD0	; 208
 136:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx('-');
 13a:	8d e2       	ldi	r24, 0x2D	; 45
 13c:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	

	ch = rtc_read(0xd0 , 0x01);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	80 ed       	ldi	r24, 0xD0	; 208
 144:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 148:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 14a:	82 95       	swap	r24
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 154:	8c 2f       	mov	r24, r28
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	80 5d       	subi	r24, 0xD0	; 208
 15a:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx('-');
 15e:	8d e2       	ldi	r24, 0x2D	; 45
 160:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	

	ch = rtc_read(0xd0 , 0x00);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 ed       	ldi	r24, 0xD0	; 208
 168:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 16c:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 16e:	82 95       	swap	r24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	80 5d       	subi	r24, 0xD0	; 208
 174:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 178:	8c 2f       	mov	r24, r28
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	80 5d       	subi	r24, 0xD0	; 208
 17e:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	tx(254);
 182:	8e ef       	ldi	r24, 0xFE	; 254
 184:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(192);
 188:	80 ec       	ldi	r24, 0xC0	; 192
 18a:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	str_serial("Date: ");
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 48 01 	call	0x290	; 0x290 <str_serial>

	ch = rtc_read(0xd0 , 0x04);
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	80 ed       	ldi	r24, 0xD0	; 208
 19a:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 19e:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1a0:	82 95       	swap	r24
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	80 5d       	subi	r24, 0xD0	; 208
 1a6:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx('-');
 1b4:	8d e2       	ldi	r24, 0x2D	; 45
 1b6:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	ch = rtc_read(0xd0 , 0x05);
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	80 ed       	ldi	r24, 0xD0	; 208
 1be:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 1c2:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1c4:	82 95       	swap	r24
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	80 5d       	subi	r24, 0xD0	; 208
 1ca:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 1ce:	8c 2f       	mov	r24, r28
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	80 5d       	subi	r24, 0xD0	; 208
 1d4:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx('-');
 1d8:	8d e2       	ldi	r24, 0x2D	; 45
 1da:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	ch = rtc_read(0xd0 , 0x06);
 1de:	66 e0       	ldi	r22, 0x06	; 6
 1e0:	80 ed       	ldi	r24, 0xD0	; 208
 1e2:	0e 94 68 00 	call	0xd0	; 0xd0 <rtc_read>
 1e6:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1e8:	82 95       	swap	r24
 1ea:	8f 70       	andi	r24, 0x0F	; 15
 1ec:	80 5d       	subi	r24, 0xD0	; 208
 1ee:	0e 94 39 01 	call	0x272	; 0x272 <tx>
	tx(ch%16+48);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 39 01 	call	0x272	; 0x272 <tx>

	
	str_serial("\r\n");	
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 48 01 	call	0x290	; 0x290 <str_serial>

 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <init_i2c>:
#include "i2c.h"
#include "avr/io.h"
#include "util/delay.h"

void init_i2c(){
	TWSR = 0X00;
 208:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0X47;
 20c:	87 e4       	ldi	r24, 0x47	; 71
 20e:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = (1<<TWEN);
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	80 93 bc 00 	sts	0x00BC, r24
 218:	08 95       	ret

0000021a <read_i2c>:
}

unsigned char read_i2c(){
	TWCR = (1<<TWINT)|(1<<TWEN);
 21a:	84 e8       	ldi	r24, 0x84	; 132
 21c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 220:	ec eb       	ldi	r30, 0xBC	; 188
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	ec f7       	brge	.-6      	; 0x224 <read_i2c+0xa>
	return TWDR;
 22a:	80 91 bb 00 	lds	r24, 0x00BB
}
 22e:	08 95       	ret

00000230 <write_i2c>:

void write_i2c(char ch)
{
	TWDR = ch;
 230:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 234:	84 ec       	ldi	r24, 0xC4	; 196
 236:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR&(1<<TWINT)));
 23a:	ec eb       	ldi	r30, 0xBC	; 188
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	88 23       	and	r24, r24
 242:	ec f7       	brge	.-6      	; 0x23e <write_i2c+0xe>
}
 244:	08 95       	ret

00000246 <start>:

void start()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 246:	84 ea       	ldi	r24, 0xA4	; 164
 248:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR &(1<<TWINT))==0);
 24c:	ec eb       	ldi	r30, 0xBC	; 188
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	ec f7       	brge	.-6      	; 0x250 <start+0xa>
}
 256:	08 95       	ret

00000258 <stop>:

void stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	80 93 bc 00 	sts	0x00BC, r24
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <stop+0xc>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <stop+0x16>
 26e:	00 00       	nop
 270:	08 95       	ret

00000272 <tx>:
#include "uart.h"
#include "util/delay.h"

void tx( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)) ); // wait until UDR is empty
 272:	e0 ec       	ldi	r30, 0xC0	; 192
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	95 ff       	sbrs	r25, 5
 27a:	fd cf       	rjmp	.-6      	; 0x276 <tx+0x4>
	UDR0 = data;
 27c:	80 93 c6 00 	sts	0x00C6, r24
 280:	08 95       	ret

00000282 <init_serial>:
	return UDR0;
}

void init_serial()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 282:	88 e1       	ldi	r24, 0x18	; 24
 284:	80 93 c1 00 	sts	0x00C1, r24
	//UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
	UBRR0L = 51;
 288:	83 e3       	ldi	r24, 0x33	; 51
 28a:	80 93 c4 00 	sts	0x00C4, r24
 28e:	08 95       	ret

00000290 <str_serial>:
}

void str_serial(char *str)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
	while(*str)
 296:	88 81       	ld	r24, Y
 298:	88 23       	and	r24, r24
 29a:	61 f0       	breq	.+24     	; 0x2b4 <str_serial+0x24>
 29c:	21 96       	adiw	r28, 0x01	; 1
	{
		tx(*str++);
 29e:	0e 94 39 01 	call	0x272	; 0x272 <tx>
 2a2:	8f e9       	ldi	r24, 0x9F	; 159
 2a4:	9f e0       	ldi	r25, 0x0F	; 15
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <str_serial+0x16>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <str_serial+0x1c>
 2ac:	00 00       	nop
	UBRR0L = 51;
}

void str_serial(char *str)
{
	while(*str)
 2ae:	89 91       	ld	r24, Y+
 2b0:	81 11       	cpse	r24, r1
 2b2:	f5 cf       	rjmp	.-22     	; 0x29e <str_serial+0xe>
	{
		tx(*str++);
		_delay_ms(1);
	}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <set_time>:
#include "lib/i2c.h"
#include "lib/ds.h"


void set_time(){
	rtc_write(0xd0,0x00,0x00);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
	rtc_write(0xd0,0x01,0x59);
 2c4:	49 e5       	ldi	r20, 0x59	; 89
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 ed       	ldi	r24, 0xD0	; 208
 2ca:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
	rtc_write(0xd0,0x02,0x23);
 2ce:	43 e2       	ldi	r20, 0x23	; 35
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	80 ed       	ldi	r24, 0xD0	; 208
 2d4:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
 2d8:	08 95       	ret

000002da <set_date>:
}

void set_date(){
	rtc_write(0xD0,0x04,0x08);
 2da:	48 e0       	ldi	r20, 0x08	; 8
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	80 ed       	ldi	r24, 0xD0	; 208
 2e0:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
	rtc_write(0xD0,0x05,0x09);
 2e4:	49 e0       	ldi	r20, 0x09	; 9
 2e6:	65 e0       	ldi	r22, 0x05	; 5
 2e8:	80 ed       	ldi	r24, 0xD0	; 208
 2ea:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
	rtc_write(0xD0,0x06,0x15);
 2ee:	45 e1       	ldi	r20, 0x15	; 21
 2f0:	66 e0       	ldi	r22, 0x06	; 6
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	0e 94 4b 00 	call	0x96	; 0x96 <rtc_write>
 2f8:	08 95       	ret

000002fa <main>:
}

int main()
{
	
	init_i2c();
 2fa:	0e 94 04 01 	call	0x208	; 0x208 <init_i2c>
	init_serial();
 2fe:	0e 94 41 01 	call	0x282	; 0x282 <init_serial>
	set_time();
 302:	0e 94 5d 01 	call	0x2ba	; 0x2ba <set_time>
	set_date();
 306:	0e 94 6d 01 	call	0x2da	; 0x2da <set_date>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	83 ed       	ldi	r24, 0xD3	; 211
 30e:	90 e3       	ldi	r25, 0x30	; 48
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x16>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x20>
 31a:	00 00       	nop
	_delay_ms(1000);


	while(1)
	{
		disp_time_date();
 31c:	0e 94 83 00 	call	0x106	; 0x106 <disp_time_date>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	83 ed       	ldi	r24, 0xD3	; 211
 324:	90 e3       	ldi	r25, 0x30	; 48
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x2c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x36>
 330:	00 00       	nop
 332:	f4 cf       	rjmp	.-24     	; 0x31c <main+0x22>

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
