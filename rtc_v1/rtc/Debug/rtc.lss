
rtc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800152  00800152  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e50  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005df  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065c  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023c  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000414  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 02 	call	0x486	; 0x486 <main>
  9e:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <rtc_write>:
#include "ds.h"
#include "util/delay.h"
#include "uart.h"

void rtc_write(char dev_addr,char dev_loc,char dev_data)
{
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	18 2f       	mov	r17, r24
  ae:	d6 2f       	mov	r29, r22
  b0:	c4 2f       	mov	r28, r20
	start();
  b2:	0e 94 29 01 	call	0x252	; 0x252 <start>
	write_i2c(dev_addr);
  b6:	81 2f       	mov	r24, r17
  b8:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>
	write_i2c(dev_loc);
  bc:	8d 2f       	mov	r24, r29
  be:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>
	write_i2c(dev_data);
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>
	stop();
  c8:	0e 94 32 01 	call	0x264	; 0x264 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <rtc_write+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <rtc_write+0x30>
  d6:	00 00       	nop
	_delay_ms(10);
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	08 95       	ret

000000e0 <rtc_read>:

unsigned char rtc_read(char dev_addr,char dev_loc)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c8 2f       	mov	r28, r24
  e6:	d6 2f       	mov	r29, r22
	char ch;

	start();
  e8:	0e 94 29 01 	call	0x252	; 0x252 <start>

	write_i2c(dev_addr);
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>
	write_i2c(dev_loc);
  f2:	8d 2f       	mov	r24, r29
  f4:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>

	start();
  f8:	0e 94 29 01 	call	0x252	; 0x252 <start>
	write_i2c(dev_addr|0x01);
  fc:	8c 2f       	mov	r24, r28
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	0e 94 1e 01 	call	0x23c	; 0x23c <write_i2c>
	ch = read_i2c();
 104:	0e 94 13 01 	call	0x226	; 0x226 <read_i2c>
 108:	c8 2f       	mov	r28, r24

	stop();
 10a:	0e 94 32 01 	call	0x264	; 0x264 <stop>
	return ch;
}
 10e:	8c 2f       	mov	r24, r28
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <disp_time_date>:



void disp_time_date()
{
 116:	cf 93       	push	r28
	char ch;

	tx(254);
 118:	8e ef       	ldi	r24, 0xFE	; 254
 11a:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(128);
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>

	str_serial("Time: ");
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>

	ch = rtc_read(0xd0 , 0x02);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	80 ed       	ldi	r24, 0xD0	; 208
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 134:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 136:	82 95       	swap	r24
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 140:	8c 2f       	mov	r24, r28
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	80 5d       	subi	r24, 0xD0	; 208
 146:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx('-');
 14a:	8d e2       	ldi	r24, 0x2D	; 45
 14c:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	

	ch = rtc_read(0xd0 , 0x01);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 158:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 15a:	82 95       	swap	r24
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 164:	8c 2f       	mov	r24, r28
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	80 5d       	subi	r24, 0xD0	; 208
 16a:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx('-');
 16e:	8d e2       	ldi	r24, 0x2D	; 45
 170:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	

	ch = rtc_read(0xd0 , 0x00);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	80 ed       	ldi	r24, 0xD0	; 208
 178:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 17c:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 17e:	82 95       	swap	r24
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	80 5d       	subi	r24, 0xD0	; 208
 184:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 188:	8c 2f       	mov	r24, r28
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	80 5d       	subi	r24, 0xD0	; 208
 18e:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>

	
	str_serial("\t");
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>

	str_serial("Date: ");
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>

	ch = rtc_read(0xd0 , 0x04);
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	80 ed       	ldi	r24, 0xD0	; 208
 1a6:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 1aa:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1ac:	82 95       	swap	r24
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	80 5d       	subi	r24, 0xD0	; 208
 1b2:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 1b6:	8c 2f       	mov	r24, r28
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	80 5d       	subi	r24, 0xD0	; 208
 1bc:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx('-');
 1c0:	8d e2       	ldi	r24, 0x2D	; 45
 1c2:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>

	ch = rtc_read(0xd0 , 0x05);
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	80 ed       	ldi	r24, 0xD0	; 208
 1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 1ce:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 1da:	8c 2f       	mov	r24, r28
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	80 5d       	subi	r24, 0xD0	; 208
 1e0:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx('-');
 1e4:	8d e2       	ldi	r24, 0x2D	; 45
 1e6:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>

	ch = rtc_read(0xd0 , 0x06);
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	80 ed       	ldi	r24, 0xD0	; 208
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <rtc_read>
 1f2:	c8 2f       	mov	r28, r24
	tx(ch/16+48);
 1f4:	82 95       	swap	r24
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
	tx(ch%16+48);
 1fe:	8c 2f       	mov	r24, r28
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>

	
	str_serial("\r\n");	
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>

 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <init_i2c>:
#include "i2c.h"
#include "avr/io.h"
#include "util/delay.h"

void init_i2c(){
	TWSR = 0X00;
 214:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 0X47;
 218:	87 e4       	ldi	r24, 0x47	; 71
 21a:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = (1<<TWEN);
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 bc 00 	sts	0x00BC, r24
 224:	08 95       	ret

00000226 <read_i2c>:
}

unsigned char read_i2c(){
	TWCR = (1<<TWINT)|(1<<TWEN);
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 22c:	ec eb       	ldi	r30, 0xBC	; 188
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <read_i2c+0xa>
	return TWDR;
 236:	80 91 bb 00 	lds	r24, 0x00BB
}
 23a:	08 95       	ret

0000023c <write_i2c>:

void write_i2c(char ch)
{
	TWDR = ch;
 23c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 240:	84 ec       	ldi	r24, 0xC4	; 196
 242:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR&(1<<TWINT)));
 246:	ec eb       	ldi	r30, 0xBC	; 188
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 23       	and	r24, r24
 24e:	ec f7       	brge	.-6      	; 0x24a <write_i2c+0xe>
}
 250:	08 95       	ret

00000252 <start>:

void start()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 252:	84 ea       	ldi	r24, 0xA4	; 164
 254:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR &(1<<TWINT))==0);
 258:	ec eb       	ldi	r30, 0xBC	; 188
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 23       	and	r24, r24
 260:	ec f7       	brge	.-6      	; 0x25c <start+0xa>
}
 262:	08 95       	ret

00000264 <stop>:

void stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 264:	84 e9       	ldi	r24, 0x94	; 148
 266:	80 93 bc 00 	sts	0x00BC, r24
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	80 e7       	ldi	r24, 0x70	; 112
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <stop+0xc>
 278:	00 c0       	rjmp	.+0      	; 0x27a <stop+0x16>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <tx>:
char rx_byte;
volatile bool is_rx_done= false;

void tx( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)) ); // wait until UDR is empty
 27e:	e0 ec       	ldi	r30, 0xC0	; 192
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	95 ff       	sbrs	r25, 5
 286:	fd cf       	rjmp	.-6      	; 0x282 <tx+0x4>
	UDR0 = data;
 288:	80 93 c6 00 	sts	0x00C6, r24
 28c:	08 95       	ret

0000028e <init_serial>:
	return UDR0;
}

void init_serial()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 28e:	88 e9       	ldi	r24, 0x98	; 152
 290:	80 93 c1 00 	sts	0x00C1, r24
	//UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
	UBRR0L = 51;
 294:	83 e3       	ldi	r24, 0x33	; 51
 296:	80 93 c4 00 	sts	0x00C4, r24
	sei();
 29a:	78 94       	sei
 29c:	08 95       	ret

0000029e <str_serial>:
}

void str_serial(char *str)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	while(*str)
 2a4:	88 81       	ld	r24, Y
 2a6:	88 23       	and	r24, r24
 2a8:	61 f0       	breq	.+24     	; 0x2c2 <str_serial+0x24>
 2aa:	21 96       	adiw	r28, 0x01	; 1
	{
		tx(*str++);
 2ac:	0e 94 3f 01 	call	0x27e	; 0x27e <tx>
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <str_serial+0x16>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <str_serial+0x1c>
 2ba:	00 00       	nop
	sei();
}

void str_serial(char *str)
{
	while(*str)
 2bc:	89 91       	ld	r24, Y+
 2be:	81 11       	cpse	r24, r1
 2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <str_serial+0xe>
	{
		tx(*str++);
		_delay_ms(1);
	}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <__vector_18>:

ISR (USART_RX_vect){
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
	
	if((UCSR0A) & (1<<RXC0)){
 2d4:	80 91 c0 00 	lds	r24, 0x00C0
 2d8:	88 23       	and	r24, r24
 2da:	3c f4       	brge	.+14     	; 0x2ea <__vector_18+0x22>
		
		rx_byte=UDR0;
 2dc:	80 91 c6 00 	lds	r24, 0x00C6
 2e0:	80 93 53 01 	sts	0x0153, r24
		is_rx_done= true;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 52 01 	sts	0x0152, r24
		//vRcvByte(rx_byte);
	}
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <vRcvString>:

extern char rx_byte;
extern volatile bool is_rx_done;


void vRcvString(char *str){
 2f6:	dc 01       	movw	r26, r24
	uint8_t r_count=0;
	//user input
	while(is_rx_done != true);
 2f8:	80 91 52 01 	lds	r24, 0x0152
 2fc:	88 23       	and	r24, r24
 2fe:	e1 f3       	breq	.-8      	; 0x2f8 <vRcvString+0x2>
	is_rx_done = false;
 300:	10 92 52 01 	sts	0x0152, r1
	//user input logic
	str[r_count] = rx_byte;
 304:	80 91 53 01 	lds	r24, 0x0153
 308:	8c 93       	st	X, r24
	while(str[r_count] != 0x0D){
 30a:	8d 30       	cpi	r24, 0x0D	; 13
 30c:	89 f0       	breq	.+34     	; 0x330 <vRcvString+0x3a>
extern char rx_byte;
extern volatile bool is_rx_done;


void vRcvString(char *str){
	uint8_t r_count=0;
 30e:	90 e0       	ldi	r25, 0x00	; 0
	while(is_rx_done != true);
	is_rx_done = false;
	//user input logic
	str[r_count] = rx_byte;
	while(str[r_count] != 0x0D){
		while(is_rx_done != true);
 310:	80 91 52 01 	lds	r24, 0x0152
 314:	88 23       	and	r24, r24
 316:	e1 f3       	breq	.-8      	; 0x310 <vRcvString+0x1a>
		is_rx_done = false;
 318:	10 92 52 01 	sts	0x0152, r1
		r_count++;
 31c:	9f 5f       	subi	r25, 0xFF	; 255
		str[r_count]=rx_byte;
 31e:	fd 01       	movw	r30, r26
 320:	e9 0f       	add	r30, r25
 322:	f1 1d       	adc	r31, r1
 324:	80 91 53 01 	lds	r24, 0x0153
 328:	80 83       	st	Z, r24
	//user input
	while(is_rx_done != true);
	is_rx_done = false;
	//user input logic
	str[r_count] = rx_byte;
	while(str[r_count] != 0x0D){
 32a:	8d 30       	cpi	r24, 0x0D	; 13
 32c:	89 f7       	brne	.-30     	; 0x310 <vRcvString+0x1a>
 32e:	01 c0       	rjmp	.+2      	; 0x332 <vRcvString+0x3c>
 330:	fd 01       	movw	r30, r26
		while(is_rx_done != true);
		is_rx_done = false;
		r_count++;
		str[r_count]=rx_byte;
	}
	str[r_count] = '\0';
 332:	10 82       	st	Z, r1
	if(str[1]!='\0'){
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	8c 91       	ld	r24, X
 338:	11 97       	sbiw	r26, 0x01	; 1
 33a:	88 23       	and	r24, r24
 33c:	01 f1       	breq	.+64     	; 0x37e <vRcvString+0x88>
		
		if(str[0]=='4'){
 33e:	9c 91       	ld	r25, X
 340:	94 33       	cpi	r25, 0x34	; 52
 342:	31 f4       	brne	.+12     	; 0x350 <vRcvString+0x5a>
			str[0]=str[0]<<4;
			str[0]|=str[1];
 344:	80 64       	ori	r24, 0x40	; 64
	
			str[0]=str[0]-0x30;
 346:	80 53       	subi	r24, 0x30	; 48
 348:	8c 93       	st	X, r24
			str[1]='\0';
 34a:	11 96       	adiw	r26, 0x01	; 1
 34c:	1c 92       	st	X, r1
 34e:	08 95       	ret
		}
		
		else if(str[0]=='3'){
 350:	93 33       	cpi	r25, 0x33	; 51
 352:	29 f4       	brne	.+10     	; 0x35e <vRcvString+0x68>
			str[0]=str[0]<<4;
			str[0]|=str[1];
 354:	80 63       	ori	r24, 0x30	; 48
 356:	8c 93       	st	X, r24
			str[1]='\0';
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	1c 92       	st	X, r1
 35c:	08 95       	ret
		}
		
		else if(str[0]=='2'){
 35e:	92 33       	cpi	r25, 0x32	; 50
 360:	31 f4       	brne	.+12     	; 0x36e <vRcvString+0x78>
			str[0]=str[0]<<4;
			str[0]|=str[1];
 362:	80 62       	ori	r24, 0x20	; 32
			str[0]=str[0]-0x10;
 364:	80 51       	subi	r24, 0x10	; 16
 366:	8c 93       	st	X, r24
			str[1]='\0';
 368:	11 96       	adiw	r26, 0x01	; 1
 36a:	1c 92       	st	X, r1
 36c:	08 95       	ret
		}
		else if(str[0]=='5' || '1'){
			str[0]=str[0]<<4;
 36e:	92 95       	swap	r25
 370:	90 7f       	andi	r25, 0xF0	; 240
			str[0]|=str[1];
 372:	89 2b       	or	r24, r25
			str[0]=str[0]-0x20;
 374:	80 52       	subi	r24, 0x20	; 32
 376:	8c 93       	st	X, r24
			str[1]='\0';
 378:	11 96       	adiw	r26, 0x01	; 1
 37a:	1c 92       	st	X, r1
 37c:	08 95       	ret
		}
		
	}
	else{
		str[0]=str[0]-0x30;
 37e:	8c 91       	ld	r24, X
 380:	80 53       	subi	r24, 0x30	; 48
 382:	8c 93       	st	X, r24
		str[1]='\0';
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	1c 92       	st	X, r1
 388:	08 95       	ret

0000038a <set_time>:
	}
	
}

void set_time(){
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	00 d0       	rcall	.+0      	; 0x390 <set_time+0x6>
 390:	1f 92       	push	r1
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
	char hrs,min,sec;
	str_serial(" set hrs:");
 396:	83 e1       	ldi	r24, 0x13	; 19
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&hrs);
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 3a6:	80 e1       	ldi	r24, 0x10	; 16
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	str_serial(" set min:");
 3ae:	8d e1       	ldi	r24, 0x1D	; 29
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&min);
 3b6:	ce 01       	movw	r24, r28
 3b8:	02 96       	adiw	r24, 0x02	; 2
 3ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	str_serial(" set sec:");
 3c6:	87 e2       	ldi	r24, 0x27	; 39
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&sec);
 3ce:	ce 01       	movw	r24, r28
 3d0:	03 96       	adiw	r24, 0x03	; 3
 3d2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	
	rtc_write(0xd0,0x00,sec);
 3de:	4b 81       	ldd	r20, Y+3	; 0x03
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 ed       	ldi	r24, 0xD0	; 208
 3e4:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
	rtc_write(0xd0,0x01,min);
 3e8:	4a 81       	ldd	r20, Y+2	; 0x02
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	80 ed       	ldi	r24, 0xD0	; 208
 3ee:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
	rtc_write(0xd0,0x02,hrs);
 3f2:	49 81       	ldd	r20, Y+1	; 0x01
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	80 ed       	ldi	r24, 0xD0	; 208
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <set_date>:

void set_date(){
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	00 d0       	rcall	.+0      	; 0x40e <set_date+0x6>
 40e:	1f 92       	push	r1
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
	char date,mon,yr;
	str_serial(" set date:");
 414:	81 e3       	ldi	r24, 0x31	; 49
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&date);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	str_serial(" set month:");
 42c:	8c e3       	ldi	r24, 0x3C	; 60
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&mon);
 434:	ce 01       	movw	r24, r28
 436:	02 96       	adiw	r24, 0x02	; 2
 438:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 43c:	80 e1       	ldi	r24, 0x10	; 16
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	str_serial(" set yr:");
 444:	88 e4       	ldi	r24, 0x48	; 72
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	vRcvString(&yr);
 44c:	ce 01       	movw	r24, r28
 44e:	03 96       	adiw	r24, 0x03	; 3
 450:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vRcvString>
	str_serial("\r\n");
 454:	80 e1       	ldi	r24, 0x10	; 16
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 4f 01 	call	0x29e	; 0x29e <str_serial>
	rtc_write(0xD0,0x04,date);
 45c:	49 81       	ldd	r20, Y+1	; 0x01
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	80 ed       	ldi	r24, 0xD0	; 208
 462:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
	rtc_write(0xD0,0x05,mon);
 466:	4a 81       	ldd	r20, Y+2	; 0x02
 468:	65 e0       	ldi	r22, 0x05	; 5
 46a:	80 ed       	ldi	r24, 0xD0	; 208
 46c:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
	rtc_write(0xD0,0x06,yr);
 470:	4b 81       	ldd	r20, Y+3	; 0x03
 472:	66 e0       	ldi	r22, 0x06	; 6
 474:	80 ed       	ldi	r24, 0xD0	; 208
 476:	0e 94 53 00 	call	0xa6	; 0xa6 <rtc_write>
}
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <main>:

int main(){
	
	init_i2c();
 486:	0e 94 0a 01 	call	0x214	; 0x214 <init_i2c>
	init_serial();
 48a:	0e 94 47 01 	call	0x28e	; 0x28e <init_serial>
	set_time();
 48e:	0e 94 c5 01 	call	0x38a	; 0x38a <set_time>
	set_date();
 492:	0e 94 04 02 	call	0x408	; 0x408 <set_date>
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	83 ed       	ldi	r24, 0xD3	; 211
 49a:	90 e3       	ldi	r25, 0x30	; 48
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x16>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x20>
 4a6:	00 00       	nop

	_delay_ms(1000);


	while(1){
		disp_time_date();
 4a8:	0e 94 8b 00 	call	0x116	; 0x116 <disp_time_date>
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	83 e2       	ldi	r24, 0x23	; 35
 4b0:	94 ef       	ldi	r25, 0xF4	; 244
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <main+0x2c>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <main+0x36>
 4bc:	00 00       	nop
 4be:	f4 cf       	rjmp	.-24     	; 0x4a8 <main+0x22>

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
